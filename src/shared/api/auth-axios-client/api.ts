/* tslint:disable */
/* eslint-disable */
/**
 * Skillbox Auth API
 * REST API для сервиса Skillbox
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PostApiAuthConfirm200Response
 */
export interface PostApiAuthConfirm200Response {
    /**
     * Гостевой токен
     * @type {string}
     * @memberof PostApiAuthConfirm200Response
     */
    'guestToken': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthConfirm403Response
 */
export interface PostApiAuthConfirm403Response {
    /**
     * Кол-во попыток
     * @type {number}
     * @memberof PostApiAuthConfirm403Response
     */
    'remainingAttempts': number;
    /**
     * Полученный код
     * @type {string}
     * @memberof PostApiAuthConfirm403Response
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthConfirmRequest
 */
export interface PostApiAuthConfirmRequest {
    /**
     * Номер смс кода из /api/auth/otp_code
     * @type {string}
     * @memberof PostApiAuthConfirmRequest
     */
    'otpId': string;
    /**
     * Номер телефона использованный в /api/auth/otp_code
     * @type {string}
     * @memberof PostApiAuthConfirmRequest
     */
    'phone': string;
    /**
     * Одноразовый код в смс для авторизации полченный в /api/auth/otp_code
     * @type {string}
     * @memberof PostApiAuthConfirmRequest
     */
    'otpCode': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthEnter200Response
 */
export interface PostApiAuthEnter200Response {
    /**
     * Access token
     * @type {string}
     * @memberof PostApiAuthEnter200Response
     */
    'accessToken': string;
    /**
     * Refresh token
     * @type {string}
     * @memberof PostApiAuthEnter200Response
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthEnterRequest
 */
export interface PostApiAuthEnterRequest {
    /**
     * Гостевой токен
     * @type {string}
     * @memberof PostApiAuthEnterRequest
     */
    'guestToken': string;
    /**
     * Новый пароль для пользователя по гостевому токену
     * @type {string}
     * @memberof PostApiAuthEnterRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthOtpCode200Response
 */
export interface PostApiAuthOtpCode200Response {
    /**
     * Номер смс кода
     * @type {string}
     * @memberof PostApiAuthOtpCode200Response
     */
    'otpId': string;
    /**
     * Одноразовый код в смс для авторизации
     * @type {string}
     * @memberof PostApiAuthOtpCode200Response
     */
    'otpCode': string;
    /**
     * Длина кода
     * @type {number}
     * @memberof PostApiAuthOtpCode200Response
     */
    'otpLen': number;
}
/**
 * 
 * @export
 * @interface PostApiAuthOtpCode403Response
 */
export interface PostApiAuthOtpCode403Response {
    /**
     * Время задержки повторного запроса
     * @type {number}
     * @memberof PostApiAuthOtpCode403Response
     */
    'resendIn': number;
    /**
     * код
     * @type {string}
     * @memberof PostApiAuthOtpCode403Response
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthOtpCodeRequest
 */
export interface PostApiAuthOtpCodeRequest {
    /**
     * Номер телефона для смс с кодом
     * @type {string}
     * @memberof PostApiAuthOtpCodeRequest
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface PostApiAuthRefreshRequest
 */
export interface PostApiAuthRefreshRequest {
    /**
     * Refresh token
     * @type {string}
     * @memberof PostApiAuthRefreshRequest
     */
    'refreshToken': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Подверждние смс кода для авторизации и получение гостевого токена
         * @summary POST /api/auth/confirm
         * @param {PostApiAuthConfirmRequest} [postApiAuthConfirmRequest] Подтверждение получение смс кода
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthConfirm: async (postApiAuthConfirmRequest?: PostApiAuthConfirmRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiAuthConfirmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Вход пользователя по гостевому токену
         * @summary POST /api/auth/enter
         * @param {PostApiAuthEnterRequest} [postApiAuthEnterRequest] Гостевой токен и пароль для регистрации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthEnter: async (postApiAuthEnterRequest?: PostApiAuthEnterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/enter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiAuthEnterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Выход пользователя из системы
         * @summary POST /api/auth/logout
         * @param {string} [authorization] Access token
         * @param {PostApiAuthRefreshRequest} [postApiAuthRefreshRequest] Отправка refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthLogout: async (authorization?: string, postApiAuthRefreshRequest?: PostApiAuthRefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiAuthRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение смс кода для авторизации
         * @summary POST /api/auth/otp_code
         * @param {PostApiAuthOtpCodeRequest} [postApiAuthOtpCodeRequest] Номер телефона для смс кода
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthOtpCode: async (postApiAuthOtpCodeRequest?: PostApiAuthOtpCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiAuthOtpCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Обновление токенов авторизованного пользователя
         * @summary POST /api/auth/refresh
         * @param {PostApiAuthRefreshRequest} [postApiAuthRefreshRequest] Отправка refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthRefresh: async (postApiAuthRefreshRequest?: PostApiAuthRefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiAuthRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Подверждние смс кода для авторизации и получение гостевого токена
         * @summary POST /api/auth/confirm
         * @param {PostApiAuthConfirmRequest} [postApiAuthConfirmRequest] Подтверждение получение смс кода
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthConfirm(postApiAuthConfirmRequest?: PostApiAuthConfirmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiAuthConfirm200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthConfirm(postApiAuthConfirmRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Вход пользователя по гостевому токену
         * @summary POST /api/auth/enter
         * @param {PostApiAuthEnterRequest} [postApiAuthEnterRequest] Гостевой токен и пароль для регистрации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthEnter(postApiAuthEnterRequest?: PostApiAuthEnterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiAuthEnter200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthEnter(postApiAuthEnterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Выход пользователя из системы
         * @summary POST /api/auth/logout
         * @param {string} [authorization] Access token
         * @param {PostApiAuthRefreshRequest} [postApiAuthRefreshRequest] Отправка refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthLogout(authorization?: string, postApiAuthRefreshRequest?: PostApiAuthRefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthLogout(authorization, postApiAuthRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение смс кода для авторизации
         * @summary POST /api/auth/otp_code
         * @param {PostApiAuthOtpCodeRequest} [postApiAuthOtpCodeRequest] Номер телефона для смс кода
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthOtpCode(postApiAuthOtpCodeRequest?: PostApiAuthOtpCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiAuthOtpCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthOtpCode(postApiAuthOtpCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Обновление токенов авторизованного пользователя
         * @summary POST /api/auth/refresh
         * @param {PostApiAuthRefreshRequest} [postApiAuthRefreshRequest] Отправка refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthRefresh(postApiAuthRefreshRequest?: PostApiAuthRefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiAuthEnter200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthRefresh(postApiAuthRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Подверждние смс кода для авторизации и получение гостевого токена
         * @summary POST /api/auth/confirm
         * @param {DefaultApiPostApiAuthConfirmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthConfirm(requestParameters: DefaultApiPostApiAuthConfirmRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiAuthConfirm200Response> {
            return localVarFp.postApiAuthConfirm(requestParameters.postApiAuthConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Вход пользователя по гостевому токену
         * @summary POST /api/auth/enter
         * @param {DefaultApiPostApiAuthEnterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthEnter(requestParameters: DefaultApiPostApiAuthEnterRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiAuthEnter200Response> {
            return localVarFp.postApiAuthEnter(requestParameters.postApiAuthEnterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Выход пользователя из системы
         * @summary POST /api/auth/logout
         * @param {DefaultApiPostApiAuthLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthLogout(requestParameters: DefaultApiPostApiAuthLogoutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postApiAuthLogout(requestParameters.authorization, requestParameters.postApiAuthRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение смс кода для авторизации
         * @summary POST /api/auth/otp_code
         * @param {DefaultApiPostApiAuthOtpCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthOtpCode(requestParameters: DefaultApiPostApiAuthOtpCodeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiAuthOtpCode200Response> {
            return localVarFp.postApiAuthOtpCode(requestParameters.postApiAuthOtpCodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Обновление токенов авторизованного пользователя
         * @summary POST /api/auth/refresh
         * @param {DefaultApiPostApiAuthRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthRefresh(requestParameters: DefaultApiPostApiAuthRefreshRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiAuthEnter200Response> {
            return localVarFp.postApiAuthRefresh(requestParameters.postApiAuthRefreshRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postApiAuthConfirm operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiAuthConfirmRequest
 */
export interface DefaultApiPostApiAuthConfirmRequest {
    /**
     * Подтверждение получение смс кода
     * @type {PostApiAuthConfirmRequest}
     * @memberof DefaultApiPostApiAuthConfirm
     */
    readonly postApiAuthConfirmRequest?: PostApiAuthConfirmRequest
}

/**
 * Request parameters for postApiAuthEnter operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiAuthEnterRequest
 */
export interface DefaultApiPostApiAuthEnterRequest {
    /**
     * Гостевой токен и пароль для регистрации
     * @type {PostApiAuthEnterRequest}
     * @memberof DefaultApiPostApiAuthEnter
     */
    readonly postApiAuthEnterRequest?: PostApiAuthEnterRequest
}

/**
 * Request parameters for postApiAuthLogout operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiAuthLogoutRequest
 */
export interface DefaultApiPostApiAuthLogoutRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiPostApiAuthLogout
     */
    readonly authorization?: string

    /**
     * Отправка refresh token
     * @type {PostApiAuthRefreshRequest}
     * @memberof DefaultApiPostApiAuthLogout
     */
    readonly postApiAuthRefreshRequest?: PostApiAuthRefreshRequest
}

/**
 * Request parameters for postApiAuthOtpCode operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiAuthOtpCodeRequest
 */
export interface DefaultApiPostApiAuthOtpCodeRequest {
    /**
     * Номер телефона для смс кода
     * @type {PostApiAuthOtpCodeRequest}
     * @memberof DefaultApiPostApiAuthOtpCode
     */
    readonly postApiAuthOtpCodeRequest?: PostApiAuthOtpCodeRequest
}

/**
 * Request parameters for postApiAuthRefresh operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiAuthRefreshRequest
 */
export interface DefaultApiPostApiAuthRefreshRequest {
    /**
     * Отправка refresh token
     * @type {PostApiAuthRefreshRequest}
     * @memberof DefaultApiPostApiAuthRefresh
     */
    readonly postApiAuthRefreshRequest?: PostApiAuthRefreshRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Подверждние смс кода для авторизации и получение гостевого токена
     * @summary POST /api/auth/confirm
     * @param {DefaultApiPostApiAuthConfirmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiAuthConfirm(requestParameters: DefaultApiPostApiAuthConfirmRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiAuthConfirm(requestParameters.postApiAuthConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Вход пользователя по гостевому токену
     * @summary POST /api/auth/enter
     * @param {DefaultApiPostApiAuthEnterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiAuthEnter(requestParameters: DefaultApiPostApiAuthEnterRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiAuthEnter(requestParameters.postApiAuthEnterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Выход пользователя из системы
     * @summary POST /api/auth/logout
     * @param {DefaultApiPostApiAuthLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiAuthLogout(requestParameters: DefaultApiPostApiAuthLogoutRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiAuthLogout(requestParameters.authorization, requestParameters.postApiAuthRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение смс кода для авторизации
     * @summary POST /api/auth/otp_code
     * @param {DefaultApiPostApiAuthOtpCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiAuthOtpCode(requestParameters: DefaultApiPostApiAuthOtpCodeRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiAuthOtpCode(requestParameters.postApiAuthOtpCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Обновление токенов авторизованного пользователя
     * @summary POST /api/auth/refresh
     * @param {DefaultApiPostApiAuthRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiAuthRefresh(requestParameters: DefaultApiPostApiAuthRefreshRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiAuthRefresh(requestParameters.postApiAuthRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


