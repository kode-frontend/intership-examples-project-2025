/* tslint:disable */
/* eslint-disable */
/**
 * Skillbox Core API
 * REST API для сервиса Skillbox
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Счёт
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'ID': number;
    /**
     * Номер счета
     * @type {string}
     * @memberof Account
     */
    'Number': string;
    /**
     * Баланс
     * @type {number}
     * @memberof Account
     */
    'Balance': number;
    /**
     * Номер валюты
     * @type {number}
     * @memberof Account
     */
    'CurrencyID': number;
    /**
     * Номер пользователя
     * @type {number}
     * @memberof Account
     */
    'UserID': number;
    /**
     * Статус аккакунта
     * @type {string}
     * @memberof Account
     */
    'Status': string;
}
/**
 * Карта
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    'id': number;
    /**
     * Номер аккаунта
     * @type {number}
     * @memberof Card
     */
    'accountId': number;
    /**
     * Номер карты
     * @type {string}
     * @memberof Card
     */
    'number': string;
    /**
     * Время окончания карты
     * @type {string}
     * @memberof Card
     */
    'expiredAt': string;
    /**
     * Тип карты
     * @type {string}
     * @memberof Card
     */
    'paymentSystem': string;
    /**
     * Статус карты
     * @type {string}
     * @memberof Card
     */
    'status': string;
    /**
     * Имя карты
     * @type {string}
     * @memberof Card
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetApiCoreAccount200Response
 */
export interface GetApiCoreAccount200Response {
    /**
     * Ид аккаунта
     * @type {number}
     * @memberof GetApiCoreAccount200Response
     */
    'accountId': number;
    /**
     * Номер аккаунта
     * @type {string}
     * @memberof GetApiCoreAccount200Response
     */
    'number': string;
    /**
     * баланс на аккаунте
     * @type {number}
     * @memberof GetApiCoreAccount200Response
     */
    'balance': number;
    /**
     * код валюты
     * @type {string}
     * @memberof GetApiCoreAccount200Response
     */
    'currency': string;
    /**
     * Статус аккаунта
     * @type {string}
     * @memberof GetApiCoreAccount200Response
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface GetApiCoreAccountList200Response
 */
export interface GetApiCoreAccountList200Response {
    /**
     * 
     * @type {Array<GetApiCoreAccountList200ResponseAccountsInner>}
     * @memberof GetApiCoreAccountList200Response
     */
    'accounts': Array<GetApiCoreAccountList200ResponseAccountsInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreAccountList200ResponseAccountsInner
 */
export interface GetApiCoreAccountList200ResponseAccountsInner {
    /**
     * Номер аккаунта
     * @type {number}
     * @memberof GetApiCoreAccountList200ResponseAccountsInner
     */
    'accountId': number;
    /**
     * номер счета
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInner
     */
    'number': string;
    /**
     * баланс
     * @type {number}
     * @memberof GetApiCoreAccountList200ResponseAccountsInner
     */
    'balance': number;
    /**
     * Код типа валюты
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInner
     */
    'currency': string;
    /**
     * Статус
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInner
     */
    'status': string;
    /**
     * Список карт
     * @type {Array<GetApiCoreAccountList200ResponseAccountsInnerCardsInner>}
     * @memberof GetApiCoreAccountList200ResponseAccountsInner
     */
    'cards'?: Array<GetApiCoreAccountList200ResponseAccountsInnerCardsInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreAccountList200ResponseAccountsInnerCardsInner
 */
export interface GetApiCoreAccountList200ResponseAccountsInnerCardsInner {
    /**
     * id карты
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInnerCardsInner
     */
    'card_id': string;
    /**
     * Номер карты
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInnerCardsInner
     */
    'number': string;
    /**
     * Статус карты
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInnerCardsInner
     */
    'status': GetApiCoreAccountList200ResponseAccountsInnerCardsInnerStatusEnum;
    /**
     * Название карты
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInnerCardsInner
     */
    'name': string;
    /**
     * Платёжная система
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInnerCardsInner
     */
    'payment_system': GetApiCoreAccountList200ResponseAccountsInnerCardsInnerPaymentSystemEnum;
    /**
     * Тип карты
     * @type {string}
     * @memberof GetApiCoreAccountList200ResponseAccountsInnerCardsInner
     */
    'card_type': GetApiCoreAccountList200ResponseAccountsInnerCardsInnerCardTypeEnum;
}

export const GetApiCoreAccountList200ResponseAccountsInnerCardsInnerStatusEnum = {
    Active: 'ACTIVE',
    Deactivated: 'DEACTIVATED'
} as const;

export type GetApiCoreAccountList200ResponseAccountsInnerCardsInnerStatusEnum = typeof GetApiCoreAccountList200ResponseAccountsInnerCardsInnerStatusEnum[keyof typeof GetApiCoreAccountList200ResponseAccountsInnerCardsInnerStatusEnum];
export const GetApiCoreAccountList200ResponseAccountsInnerCardsInnerPaymentSystemEnum = {
    Visa: 'Visa',
    MasterCard: 'MasterCard'
} as const;

export type GetApiCoreAccountList200ResponseAccountsInnerCardsInnerPaymentSystemEnum = typeof GetApiCoreAccountList200ResponseAccountsInnerCardsInnerPaymentSystemEnum[keyof typeof GetApiCoreAccountList200ResponseAccountsInnerCardsInnerPaymentSystemEnum];
export const GetApiCoreAccountList200ResponseAccountsInnerCardsInnerCardTypeEnum = {
    Physical: 'physical',
    Digital: 'digital'
} as const;

export type GetApiCoreAccountList200ResponseAccountsInnerCardsInnerCardTypeEnum = typeof GetApiCoreAccountList200ResponseAccountsInnerCardsInnerCardTypeEnum[keyof typeof GetApiCoreAccountList200ResponseAccountsInnerCardsInnerCardTypeEnum];

/**
 * 
 * @export
 * @interface GetApiCoreCardCardIdCode200Response
 */
export interface GetApiCoreCardCardIdCode200Response {
    /**
     * Пин код карты
     * @type {string}
     * @memberof GetApiCoreCardCardIdCode200Response
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface GetApiCoreCurrrencyList200Response
 */
export interface GetApiCoreCurrrencyList200Response {
    /**
     * 
     * @type {Array<GetApiCoreCurrrencyList200ResponseCurrenciesInner>}
     * @memberof GetApiCoreCurrrencyList200Response
     */
    'currencies': Array<GetApiCoreCurrrencyList200ResponseCurrenciesInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreCurrrencyList200ResponseCurrenciesInner
 */
export interface GetApiCoreCurrrencyList200ResponseCurrenciesInner {
    /**
     * Номер валюты
     * @type {number}
     * @memberof GetApiCoreCurrrencyList200ResponseCurrenciesInner
     */
    'id': number;
    /**
     * Код валюты
     * @type {string}
     * @memberof GetApiCoreCurrrencyList200ResponseCurrenciesInner
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface GetApiCoreDeposit200Response
 */
export interface GetApiCoreDeposit200Response {
    /**
     * 
     * @type {Array<GetApiCoreDeposit200ResponseTypesInner>}
     * @memberof GetApiCoreDeposit200Response
     */
    'types': Array<GetApiCoreDeposit200ResponseTypesInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreDeposit200ResponseTypesInner
 */
export interface GetApiCoreDeposit200ResponseTypesInner {
    /**
     * Имя типа монолита
     * @type {string}
     * @memberof GetApiCoreDeposit200ResponseTypesInner
     */
    'name'?: string;
    /**
     * Срок
     * @type {number}
     * @memberof GetApiCoreDeposit200ResponseTypesInner
     */
    'term': number;
    /**
     * Процент
     * @type {number}
     * @memberof GetApiCoreDeposit200ResponseTypesInner
     */
    'rate': number;
    /**
     * Тип валюты
     * @type {string}
     * @memberof GetApiCoreDeposit200ResponseTypesInner
     */
    'currency': string;
    /**
     * Минимальная сумма
     * @type {number}
     * @memberof GetApiCoreDeposit200ResponseTypesInner
     */
    'minSize': number;
}
/**
 * 
 * @export
 * @interface GetApiCoreDepositDepositId200Response
 */
export interface GetApiCoreDepositDepositId200Response {
    /**
     * Имя типа монолита
     * @type {string}
     * @memberof GetApiCoreDepositDepositId200Response
     */
    'name'?: string;
    /**
     * Баланс
     * @type {number}
     * @memberof GetApiCoreDepositDepositId200Response
     */
    'balance': number;
    /**
     * Тип валюты
     * @type {string}
     * @memberof GetApiCoreDepositDepositId200Response
     */
    'currency': string;
    /**
     * Процент
     * @type {number}
     * @memberof GetApiCoreDepositDepositId200Response
     */
    'rate': number;
    /**
     * Статус
     * @type {string}
     * @memberof GetApiCoreDepositDepositId200Response
     */
    'status': string;
    /**
     * Дата закрытия
     * @type {string}
     * @memberof GetApiCoreDepositDepositId200Response
     */
    'closeDate': string;
}
/**
 * 
 * @export
 * @interface GetApiCoreDepositList200Response
 */
export interface GetApiCoreDepositList200Response {
    /**
     * 
     * @type {Array<GetApiCoreDepositList200ResponseDepositsInner>}
     * @memberof GetApiCoreDepositList200Response
     */
    'deposits': Array<GetApiCoreDepositList200ResponseDepositsInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreDepositList200ResponseDepositsInner
 */
export interface GetApiCoreDepositList200ResponseDepositsInner {
    /**
     * Номер депозита
     * @type {number}
     * @memberof GetApiCoreDepositList200ResponseDepositsInner
     */
    'depositId': number;
    /**
     * Баланс
     * @type {number}
     * @memberof GetApiCoreDepositList200ResponseDepositsInner
     */
    'balance': number;
    /**
     * Тип валюты
     * @type {string}
     * @memberof GetApiCoreDepositList200ResponseDepositsInner
     */
    'currency': string;
    /**
     * Статус
     * @type {string}
     * @memberof GetApiCoreDepositList200ResponseDepositsInner
     */
    'status': string;
    /**
     * Имя типа депозита
     * @type {string}
     * @memberof GetApiCoreDepositList200ResponseDepositsInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetApiCoreHistory200Response
 */
export interface GetApiCoreHistory200Response {
    /**
     * Номер аккаунта
     * @type {number}
     * @memberof GetApiCoreHistory200Response
     */
    'accountId': number;
    /**
     * Номер аккаунта
     * @type {string}
     * @memberof GetApiCoreHistory200Response
     */
    'accountNumber': string;
    /**
     * Тип валюты
     * @type {string}
     * @memberof GetApiCoreHistory200Response
     */
    'currency': string;
    /**
     * 
     * @type {Array<GetApiCoreHistory200ResponseCardsInner>}
     * @memberof GetApiCoreHistory200Response
     */
    'cards'?: Array<GetApiCoreHistory200ResponseCardsInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreHistory200ResponseCardsInner
 */
export interface GetApiCoreHistory200ResponseCardsInner {
    /**
     * 
     * @type {number}
     * @memberof GetApiCoreHistory200ResponseCardsInner
     */
    'cardId': number;
    /**
     * 
     * @type {string}
     * @memberof GetApiCoreHistory200ResponseCardsInner
     */
    'number': string;
    /**
     * 
     * @type {Array<GetApiCoreHistory200ResponseCardsInnerOperationsInner>}
     * @memberof GetApiCoreHistory200ResponseCardsInner
     */
    'operations'?: Array<GetApiCoreHistory200ResponseCardsInnerOperationsInner>;
}
/**
 * 
 * @export
 * @interface GetApiCoreHistory200ResponseCardsInnerOperationsInner
 */
export interface GetApiCoreHistory200ResponseCardsInnerOperationsInner {
    /**
     * 
     * @type {string}
     * @memberof GetApiCoreHistory200ResponseCardsInnerOperationsInner
     */
    'data': string;
    /**
     * 
     * @type {string}
     * @memberof GetApiCoreHistory200ResponseCardsInnerOperationsInner
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof GetApiCoreHistory200ResponseCardsInnerOperationsInner
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof GetApiCoreHistory200ResponseCardsInnerOperationsInner
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface GetApiCorePaymentServiceId200Response
 */
export interface GetApiCorePaymentServiceId200Response {
    /**
     * 
     * @type {number}
     * @memberof GetApiCorePaymentServiceId200Response
     */
    'service_id': number;
    /**
     * 
     * @type {number}
     * @memberof GetApiCorePaymentServiceId200Response
     */
    'cashback_percentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetApiCorePaymentServiceId200Response
     */
    'recipient_mask': string;
    /**
     * 
     * @type {string}
     * @memberof GetApiCorePaymentServiceId200Response
     */
    'comment_mask'?: string | null;
}
/**
 * 
 * @export
 * @interface GetPaymentList200Response
 */
export interface GetPaymentList200Response {
    /**
     * 
     * @type {Array<GetPaymentList200ResponseCategoryInner>}
     * @memberof GetPaymentList200Response
     */
    'category': Array<GetPaymentList200ResponseCategoryInner>;
}
/**
 * 
 * @export
 * @interface GetPaymentList200ResponseCategoryInner
 */
export interface GetPaymentList200ResponseCategoryInner {
    /**
     * 
     * @type {string}
     * @memberof GetPaymentList200ResponseCategoryInner
     */
    'category_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetPaymentList200ResponseCategoryInner
     */
    'category_name': string;
    /**
     * 
     * @type {Array<GetPaymentList200ResponseCategoryInnerServicesInner>}
     * @memberof GetPaymentList200ResponseCategoryInner
     */
    'services'?: Array<GetPaymentList200ResponseCategoryInnerServicesInner>;
}
/**
 * 
 * @export
 * @interface GetPaymentList200ResponseCategoryInnerServicesInner
 */
export interface GetPaymentList200ResponseCategoryInnerServicesInner {
    /**
     * 
     * @type {string}
     * @memberof GetPaymentList200ResponseCategoryInnerServicesInner
     */
    'service_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetPaymentList200ResponseCategoryInnerServicesInner
     */
    'service_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetPaymentList200ResponseCategoryInnerServicesInner
     */
    'service_icon'?: string | null;
}
/**
 * 
 * @export
 * @interface PostApiCoreAccount1200Response
 */
export interface PostApiCoreAccount1200Response {
    /**
     * Номер аккаунта
     * @type {number}
     * @memberof PostApiCoreAccount1200Response
     */
    'accountId': number;
}
/**
 * 
 * @export
 * @interface PostApiCoreAccount1Request
 */
export interface PostApiCoreAccount1Request {
    /**
     * Номер смс кода
     * @type {string}
     * @memberof PostApiCoreAccount1Request
     */
    'otpId': string;
    /**
     * Одноразовый код в смс для авторизации
     * @type {string}
     * @memberof PostApiCoreAccount1Request
     */
    'otpCode': string;
    /**
     * Тип валюты
     * @type {string}
     * @memberof PostApiCoreAccount1Request
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PostApiCoreCard200Response
 */
export interface PostApiCoreCard200Response {
    /**
     * Номер карты
     * @type {number}
     * @memberof PostApiCoreCard200Response
     */
    'cardId': number;
}
/**
 * 
 * @export
 * @interface PostApiCoreCardRequest
 */
export interface PostApiCoreCardRequest {
    /**
     * Номер аккаунта пользователя
     * @type {number}
     * @memberof PostApiCoreCardRequest
     */
    'accountId': number;
    /**
     * Имя карты
     * @type {string}
     * @memberof PostApiCoreCardRequest
     */
    'name': string;
    /**
     * Номер смс кода
     * @type {string}
     * @memberof PostApiCoreCardRequest
     */
    'otpCode': string;
    /**
     * Смс код
     * @type {string}
     * @memberof PostApiCoreCardRequest
     */
    'otpId': string;
}
/**
 * 
 * @export
 * @interface PostApiCoreDeposit200Response
 */
export interface PostApiCoreDeposit200Response {
    /**
     * Номер депозита
     * @type {number}
     * @memberof PostApiCoreDeposit200Response
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PostApiCoreDeposit403Response
 */
export interface PostApiCoreDeposit403Response {
    /**
     * Кол-во оставшихся попыток
     * @type {number}
     * @memberof PostApiCoreDeposit403Response
     */
    'remaining_attempts': number;
    /**
     * Введеный код
     * @type {string}
     * @memberof PostApiCoreDeposit403Response
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface PostApiCoreDepositRequest
 */
export interface PostApiCoreDepositRequest {
    /**
     * Тип депозита
     * @type {number}
     * @memberof PostApiCoreDepositRequest
     */
    'type': number;
    /**
     * Номер смс кода
     * @type {string}
     * @memberof PostApiCoreDepositRequest
     */
    'otpId': string;
    /**
     * Смс код
     * @type {string}
     * @memberof PostApiCoreDepositRequest
     */
    'otpCode': string;
}
/**
 * 
 * @export
 * @interface PostApiCoreHistory200Response
 */
export interface PostApiCoreHistory200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiCoreHistory200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface PostApiCoreHistoryRequest
 */
export interface PostApiCoreHistoryRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiCoreHistoryRequest
     */
    'card_id': number;
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreHistoryRequest
     */
    'service_id': string;
    /**
     * 
     * @type {number}
     * @memberof PostApiCoreHistoryRequest
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PostApiCoreHistoryRequest
     */
    'size_cashback'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreHistoryRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreHistoryRequest
     */
    'period_from': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreHistoryRequest
     */
    'period_to'?: string;
}
/**
 * 
 * @export
 * @interface PostApiCoreOtp200Response
 */
export interface PostApiCoreOtp200Response {
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreOtp200Response
     */
    'otpId': string;
    /**
     * 
     * @type {number}
     * @memberof PostApiCoreOtp200Response
     */
    'otpLen': number;
    /**
     * количество секунд для перезапроса
     * @type {number}
     * @memberof PostApiCoreOtp200Response
     */
    'resendIn': number;
    /**
     * 
     * @type {number}
     * @memberof PostApiCoreOtp200Response
     */
    'attemptsLeft'?: number;
}
/**
 * 
 * @export
 * @interface PostApiCoreOtp409Response
 */
export interface PostApiCoreOtp409Response {
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreOtp409Response
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface PostApiCoreOtpConfirm200Response
 */
export interface PostApiCoreOtpConfirm200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiCoreOtpConfirm200Response
     */
    'status'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PostApiCoreOtpConfirm200Response
     */
    'attemptLeft'?: number;
}
/**
 * 
 * @export
 * @interface PostApiCoreOtpConfirmRequest
 */
export interface PostApiCoreOtpConfirmRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreOtpConfirmRequest
     */
    'otp': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreOtpConfirmRequest
     */
    'otpId': string;
}
/**
 * 
 * @export
 * @interface PostApiCoreOtpRequest
 */
export interface PostApiCoreOtpRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreOtpRequest
     */
    'operation'?: PostApiCoreOtpRequestOperationEnum;
}

export const PostApiCoreOtpRequestOperationEnum = {
    Payment: 'PAYMENT'
} as const;

export type PostApiCoreOtpRequestOperationEnum = typeof PostApiCoreOtpRequestOperationEnum[keyof typeof PostApiCoreOtpRequestOperationEnum];

/**
 * 
 * @export
 * @interface PostApiCoreOtpResendRequest
 */
export interface PostApiCoreOtpResendRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiCoreOtpResendRequest
     */
    'otpId'?: string;
}
/**
 * 
 * @export
 * @interface PutApiCoreCardCardIdRequest
 */
export interface PutApiCoreCardCardIdRequest {
    /**
     * Новое имя карты
     * @type {string}
     * @memberof PutApiCoreCardCardIdRequest
     */
    'newName': string;
}
/**
 * Пользователь
 * @export
 * @interface User
 */
export interface User {
    /**
     * Номер в бд
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * Имя
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * Отчество
     * @type {string}
     * @memberof User
     */
    'middleName': string;
    /**
     * Фамилия
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * Страна
     * @type {string}
     * @memberof User
     */
    'country': string;
    /**
     * Телефон
     * @type {string}
     * @memberof User
     */
    'phone': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получение информации о аккаунте
         * @summary GET /api/core/account/{accountId}
         * @param {number} accountId Номер аккаунта
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreAccount: async (accountId: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getApiCoreAccount', 'accountId', accountId)
            const localVarPath = `/api/core/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение списка аккаунтов
         * @summary GET /api/core/account/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreAccountList: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/account/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение информации об карте
         * @summary GET /api/core/card/{cardId}
         * @param {string} cardId Номер карты в аккаунте
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreCardCardId: async (cardId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiCoreCardCardId', 'cardId', cardId)
            const localVarPath = `/api/core/card/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить пин код
         * @summary GET /api/core/card/{cardId}/code
         * @param {string} cardId Номер карты в аккаунте
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreCardCardIdCode: async (cardId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiCoreCardCardIdCode', 'cardId', cardId)
            const localVarPath = `/api/core/card/{cardId}/code`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET /api/core/currrency/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreCurrrencyList: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/currrency/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET /api/core/deposit
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreDeposit: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET /api/core/deposit/{depositId}
         * @param {number} depositId Номер депозита
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreDepositDepositId: async (depositId: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('getApiCoreDepositDepositId', 'depositId', depositId)
            const localVarPath = `/api/core/deposit/{depositId}`
                .replace(`{${"depositId"}}`, encodeURIComponent(String(depositId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список депозитов
         * @summary GET /api/core/deposit/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreDepositList: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/deposit/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение истории аккаунта
         * @summary GET /api/core/history
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreHistory: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получение информации о пользователе
         * @summary GET /api/core/profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Создание аккаунта
         * @summary POST /api/core/account
         * @param {string} [authorization] Access token
         * @param {PostApiCoreAccount1Request} [postApiCoreAccount1Request] Тип открытого счета
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreAccount1: async (authorization?: string, postApiCoreAccount1Request?: PostApiCoreAccount1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreAccount1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Создание карты в аккаунте
         * @summary POST /api/core/card
         * @param {string} [authorization] Access token
         * @param {PostApiCoreCardRequest} [postApiCoreCardRequest] Создание карты
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreCard: async (authorization?: string, postApiCoreCardRequest?: PostApiCoreCardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/card`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreCardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Создание депозита
         * @summary POST /api/core/deposit
         * @param {string} [authorization] Access token
         * @param {PostApiCoreDepositRequest} [postApiCoreDepositRequest] Запрос  депозита
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreDeposit: async (authorization?: string, postApiCoreDepositRequest?: PostApiCoreDepositRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreDepositRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostApiCoreOtpRequest} [postApiCoreOtpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreOtp: async (postApiCoreOtpRequest?: PostApiCoreOtpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreOtpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostApiCoreOtpConfirmRequest} [postApiCoreOtpConfirmRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreOtpConfirm: async (postApiCoreOtpConfirmRequest?: PostApiCoreOtpConfirmRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/otp/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreOtpConfirmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostApiCoreOtpResendRequest} [postApiCoreOtpResendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreOtpResend: async (postApiCoreOtpResendRequest?: PostApiCoreOtpResendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/otp/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreOtpResendRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Редактирование карты
         * @summary PUT /api/core/card/{card_id}
         * @param {string} cardId Номер карты в аккаунте
         * @param {string} [authorization] Access token
         * @param {PutApiCoreCardCardIdRequest} [putApiCoreCardCardIdRequest] Новое имя карты
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiCoreCardCardId: async (cardId: string, authorization?: string, putApiCoreCardCardIdRequest?: PutApiCoreCardCardIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('putApiCoreCardCardId', 'cardId', cardId)
            const localVarPath = `/api/core/card/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putApiCoreCardCardIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Получение информации о аккаунте
         * @summary GET /api/core/account/{accountId}
         * @param {number} accountId Номер аккаунта
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreAccount(accountId: number, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreAccount(accountId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение списка аккаунтов
         * @summary GET /api/core/account/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreAccountList(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreAccountList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreAccountList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение информации об карте
         * @summary GET /api/core/card/{cardId}
         * @param {string} cardId Номер карты в аккаунте
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreCardCardId(cardId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Card>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreCardCardId(cardId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить пин код
         * @summary GET /api/core/card/{cardId}/code
         * @param {string} cardId Номер карты в аккаунте
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreCardCardIdCode(cardId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreCardCardIdCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreCardCardIdCode(cardId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET /api/core/currrency/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreCurrrencyList(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreCurrrencyList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreCurrrencyList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET /api/core/deposit
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreDeposit(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreDeposit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreDeposit(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET /api/core/deposit/{depositId}
         * @param {number} depositId Номер депозита
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreDepositDepositId(depositId: number, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreDepositDepositId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreDepositDepositId(depositId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить список депозитов
         * @summary GET /api/core/deposit/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreDepositList(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreDepositList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreDepositList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение истории аккаунта
         * @summary GET /api/core/history
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreHistory(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCoreHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreHistory(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получение информации о пользователе
         * @summary GET /api/core/profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCoreProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCoreProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Создание аккаунта
         * @summary POST /api/core/account
         * @param {string} [authorization] Access token
         * @param {PostApiCoreAccount1Request} [postApiCoreAccount1Request] Тип открытого счета
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreAccount1(authorization?: string, postApiCoreAccount1Request?: PostApiCoreAccount1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreAccount1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreAccount1(authorization, postApiCoreAccount1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Создание карты в аккаунте
         * @summary POST /api/core/card
         * @param {string} [authorization] Access token
         * @param {PostApiCoreCardRequest} [postApiCoreCardRequest] Создание карты
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreCard(authorization?: string, postApiCoreCardRequest?: PostApiCoreCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreCard200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreCard(authorization, postApiCoreCardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Создание депозита
         * @summary POST /api/core/deposit
         * @param {string} [authorization] Access token
         * @param {PostApiCoreDepositRequest} [postApiCoreDepositRequest] Запрос  депозита
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreDeposit(authorization?: string, postApiCoreDepositRequest?: PostApiCoreDepositRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreDeposit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreDeposit(authorization, postApiCoreDepositRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostApiCoreOtpRequest} [postApiCoreOtpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreOtp(postApiCoreOtpRequest?: PostApiCoreOtpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreOtp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreOtp(postApiCoreOtpRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostApiCoreOtpConfirmRequest} [postApiCoreOtpConfirmRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreOtpConfirm(postApiCoreOtpConfirmRequest?: PostApiCoreOtpConfirmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreOtpConfirm200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreOtpConfirm(postApiCoreOtpConfirmRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostApiCoreOtpResendRequest} [postApiCoreOtpResendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreOtpResend(postApiCoreOtpResendRequest?: PostApiCoreOtpResendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreOtp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreOtpResend(postApiCoreOtpResendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Редактирование карты
         * @summary PUT /api/core/card/{card_id}
         * @param {string} cardId Номер карты в аккаунте
         * @param {string} [authorization] Access token
         * @param {PutApiCoreCardCardIdRequest} [putApiCoreCardCardIdRequest] Новое имя карты
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiCoreCardCardId(cardId: string, authorization?: string, putApiCoreCardCardIdRequest?: PutApiCoreCardCardIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiCoreCardCardId(cardId, authorization, putApiCoreCardCardIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Получение информации о аккаунте
         * @summary GET /api/core/account/{accountId}
         * @param {DefaultApiGetApiCoreAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreAccount(requestParameters: DefaultApiGetApiCoreAccountRequest, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreAccount200Response> {
            return localVarFp.getApiCoreAccount(requestParameters.accountId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение списка аккаунтов
         * @summary GET /api/core/account/list
         * @param {DefaultApiGetApiCoreAccountListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreAccountList(requestParameters: DefaultApiGetApiCoreAccountListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreAccountList200Response> {
            return localVarFp.getApiCoreAccountList(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение информации об карте
         * @summary GET /api/core/card/{cardId}
         * @param {DefaultApiGetApiCoreCardCardIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreCardCardId(requestParameters: DefaultApiGetApiCoreCardCardIdRequest, options?: AxiosRequestConfig): AxiosPromise<Card> {
            return localVarFp.getApiCoreCardCardId(requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить пин код
         * @summary GET /api/core/card/{cardId}/code
         * @param {DefaultApiGetApiCoreCardCardIdCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreCardCardIdCode(requestParameters: DefaultApiGetApiCoreCardCardIdCodeRequest, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreCardCardIdCode200Response> {
            return localVarFp.getApiCoreCardCardIdCode(requestParameters.cardId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET /api/core/currrency/list
         * @param {DefaultApiGetApiCoreCurrrencyListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreCurrrencyList(requestParameters: DefaultApiGetApiCoreCurrrencyListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreCurrrencyList200Response> {
            return localVarFp.getApiCoreCurrrencyList(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET /api/core/deposit
         * @param {DefaultApiGetApiCoreDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreDeposit(requestParameters: DefaultApiGetApiCoreDepositRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreDeposit200Response> {
            return localVarFp.getApiCoreDeposit(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET /api/core/deposit/{depositId}
         * @param {DefaultApiGetApiCoreDepositDepositIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreDepositDepositId(requestParameters: DefaultApiGetApiCoreDepositDepositIdRequest, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreDepositDepositId200Response> {
            return localVarFp.getApiCoreDepositDepositId(requestParameters.depositId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список депозитов
         * @summary GET /api/core/deposit/list
         * @param {DefaultApiGetApiCoreDepositListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreDepositList(requestParameters: DefaultApiGetApiCoreDepositListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreDepositList200Response> {
            return localVarFp.getApiCoreDepositList(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение истории аккаунта
         * @summary GET /api/core/history
         * @param {DefaultApiGetApiCoreHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreHistory(requestParameters: DefaultApiGetApiCoreHistoryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetApiCoreHistory200Response> {
            return localVarFp.getApiCoreHistory(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Получение информации о пользователе
         * @summary GET /api/core/profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCoreProfile(options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getApiCoreProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Создание аккаунта
         * @summary POST /api/core/account
         * @param {DefaultApiPostApiCoreAccount1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreAccount1(requestParameters: DefaultApiPostApiCoreAccount1Request = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreAccount1200Response> {
            return localVarFp.postApiCoreAccount1(requestParameters.authorization, requestParameters.postApiCoreAccount1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Создание карты в аккаунте
         * @summary POST /api/core/card
         * @param {DefaultApiPostApiCoreCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreCard(requestParameters: DefaultApiPostApiCoreCardRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreCard200Response> {
            return localVarFp.postApiCoreCard(requestParameters.authorization, requestParameters.postApiCoreCardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Создание депозита
         * @summary POST /api/core/deposit
         * @param {DefaultApiPostApiCoreDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreDeposit(requestParameters: DefaultApiPostApiCoreDepositRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreDeposit200Response> {
            return localVarFp.postApiCoreDeposit(requestParameters.authorization, requestParameters.postApiCoreDepositRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DefaultApiPostApiCoreOtpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreOtp(requestParameters: DefaultApiPostApiCoreOtpRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreOtp200Response> {
            return localVarFp.postApiCoreOtp(requestParameters.postApiCoreOtpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DefaultApiPostApiCoreOtpConfirmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreOtpConfirm(requestParameters: DefaultApiPostApiCoreOtpConfirmRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreOtpConfirm200Response> {
            return localVarFp.postApiCoreOtpConfirm(requestParameters.postApiCoreOtpConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DefaultApiPostApiCoreOtpResendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreOtpResend(requestParameters: DefaultApiPostApiCoreOtpResendRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreOtp200Response> {
            return localVarFp.postApiCoreOtpResend(requestParameters.postApiCoreOtpResendRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Редактирование карты
         * @summary PUT /api/core/card/{card_id}
         * @param {DefaultApiPutApiCoreCardCardIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiCoreCardCardId(requestParameters: DefaultApiPutApiCoreCardCardIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putApiCoreCardCardId(requestParameters.cardId, requestParameters.authorization, requestParameters.putApiCoreCardCardIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getApiCoreAccount operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreAccountRequest
 */
export interface DefaultApiGetApiCoreAccountRequest {
    /**
     * Номер аккаунта
     * @type {number}
     * @memberof DefaultApiGetApiCoreAccount
     */
    readonly accountId: number

    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreAccount
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreAccountList operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreAccountListRequest
 */
export interface DefaultApiGetApiCoreAccountListRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreAccountList
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreCardCardId operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreCardCardIdRequest
 */
export interface DefaultApiGetApiCoreCardCardIdRequest {
    /**
     * Номер карты в аккаунте
     * @type {string}
     * @memberof DefaultApiGetApiCoreCardCardId
     */
    readonly cardId: string

    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreCardCardId
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreCardCardIdCode operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreCardCardIdCodeRequest
 */
export interface DefaultApiGetApiCoreCardCardIdCodeRequest {
    /**
     * Номер карты в аккаунте
     * @type {string}
     * @memberof DefaultApiGetApiCoreCardCardIdCode
     */
    readonly cardId: string

    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreCardCardIdCode
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreCurrrencyList operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreCurrrencyListRequest
 */
export interface DefaultApiGetApiCoreCurrrencyListRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreCurrrencyList
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreDeposit operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreDepositRequest
 */
export interface DefaultApiGetApiCoreDepositRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreDeposit
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreDepositDepositId operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreDepositDepositIdRequest
 */
export interface DefaultApiGetApiCoreDepositDepositIdRequest {
    /**
     * Номер депозита
     * @type {number}
     * @memberof DefaultApiGetApiCoreDepositDepositId
     */
    readonly depositId: number

    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreDepositDepositId
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreDepositList operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreDepositListRequest
 */
export interface DefaultApiGetApiCoreDepositListRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreDepositList
     */
    readonly authorization?: string
}

/**
 * Request parameters for getApiCoreHistory operation in DefaultApi.
 * @export
 * @interface DefaultApiGetApiCoreHistoryRequest
 */
export interface DefaultApiGetApiCoreHistoryRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiGetApiCoreHistory
     */
    readonly authorization?: string
}

/**
 * Request parameters for postApiCoreAccount1 operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiCoreAccount1Request
 */
export interface DefaultApiPostApiCoreAccount1Request {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiPostApiCoreAccount1
     */
    readonly authorization?: string

    /**
     * Тип открытого счета
     * @type {PostApiCoreAccount1Request}
     * @memberof DefaultApiPostApiCoreAccount1
     */
    readonly postApiCoreAccount1Request?: PostApiCoreAccount1Request
}

/**
 * Request parameters for postApiCoreCard operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiCoreCardRequest
 */
export interface DefaultApiPostApiCoreCardRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiPostApiCoreCard
     */
    readonly authorization?: string

    /**
     * Создание карты
     * @type {PostApiCoreCardRequest}
     * @memberof DefaultApiPostApiCoreCard
     */
    readonly postApiCoreCardRequest?: PostApiCoreCardRequest
}

/**
 * Request parameters for postApiCoreDeposit operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiCoreDepositRequest
 */
export interface DefaultApiPostApiCoreDepositRequest {
    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiPostApiCoreDeposit
     */
    readonly authorization?: string

    /**
     * Запрос  депозита
     * @type {PostApiCoreDepositRequest}
     * @memberof DefaultApiPostApiCoreDeposit
     */
    readonly postApiCoreDepositRequest?: PostApiCoreDepositRequest
}

/**
 * Request parameters for postApiCoreOtp operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiCoreOtpRequest
 */
export interface DefaultApiPostApiCoreOtpRequest {
    /**
     * 
     * @type {PostApiCoreOtpRequest}
     * @memberof DefaultApiPostApiCoreOtp
     */
    readonly postApiCoreOtpRequest?: PostApiCoreOtpRequest
}

/**
 * Request parameters for postApiCoreOtpConfirm operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiCoreOtpConfirmRequest
 */
export interface DefaultApiPostApiCoreOtpConfirmRequest {
    /**
     * 
     * @type {PostApiCoreOtpConfirmRequest}
     * @memberof DefaultApiPostApiCoreOtpConfirm
     */
    readonly postApiCoreOtpConfirmRequest?: PostApiCoreOtpConfirmRequest
}

/**
 * Request parameters for postApiCoreOtpResend operation in DefaultApi.
 * @export
 * @interface DefaultApiPostApiCoreOtpResendRequest
 */
export interface DefaultApiPostApiCoreOtpResendRequest {
    /**
     * 
     * @type {PostApiCoreOtpResendRequest}
     * @memberof DefaultApiPostApiCoreOtpResend
     */
    readonly postApiCoreOtpResendRequest?: PostApiCoreOtpResendRequest
}

/**
 * Request parameters for putApiCoreCardCardId operation in DefaultApi.
 * @export
 * @interface DefaultApiPutApiCoreCardCardIdRequest
 */
export interface DefaultApiPutApiCoreCardCardIdRequest {
    /**
     * Номер карты в аккаунте
     * @type {string}
     * @memberof DefaultApiPutApiCoreCardCardId
     */
    readonly cardId: string

    /**
     * Access token
     * @type {string}
     * @memberof DefaultApiPutApiCoreCardCardId
     */
    readonly authorization?: string

    /**
     * Новое имя карты
     * @type {PutApiCoreCardCardIdRequest}
     * @memberof DefaultApiPutApiCoreCardCardId
     */
    readonly putApiCoreCardCardIdRequest?: PutApiCoreCardCardIdRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Получение информации о аккаунте
     * @summary GET /api/core/account/{accountId}
     * @param {DefaultApiGetApiCoreAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreAccount(requestParameters: DefaultApiGetApiCoreAccountRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreAccount(requestParameters.accountId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение списка аккаунтов
     * @summary GET /api/core/account/list
     * @param {DefaultApiGetApiCoreAccountListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreAccountList(requestParameters: DefaultApiGetApiCoreAccountListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreAccountList(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение информации об карте
     * @summary GET /api/core/card/{cardId}
     * @param {DefaultApiGetApiCoreCardCardIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreCardCardId(requestParameters: DefaultApiGetApiCoreCardCardIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreCardCardId(requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить пин код
     * @summary GET /api/core/card/{cardId}/code
     * @param {DefaultApiGetApiCoreCardCardIdCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreCardCardIdCode(requestParameters: DefaultApiGetApiCoreCardCardIdCodeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreCardCardIdCode(requestParameters.cardId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET /api/core/currrency/list
     * @param {DefaultApiGetApiCoreCurrrencyListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreCurrrencyList(requestParameters: DefaultApiGetApiCoreCurrrencyListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreCurrrencyList(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET /api/core/deposit
     * @param {DefaultApiGetApiCoreDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreDeposit(requestParameters: DefaultApiGetApiCoreDepositRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreDeposit(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET /api/core/deposit/{depositId}
     * @param {DefaultApiGetApiCoreDepositDepositIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreDepositDepositId(requestParameters: DefaultApiGetApiCoreDepositDepositIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreDepositDepositId(requestParameters.depositId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список депозитов
     * @summary GET /api/core/deposit/list
     * @param {DefaultApiGetApiCoreDepositListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreDepositList(requestParameters: DefaultApiGetApiCoreDepositListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreDepositList(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение истории аккаунта
     * @summary GET /api/core/history
     * @param {DefaultApiGetApiCoreHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreHistory(requestParameters: DefaultApiGetApiCoreHistoryRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreHistory(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получение информации о пользователе
     * @summary GET /api/core/profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiCoreProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiCoreProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Создание аккаунта
     * @summary POST /api/core/account
     * @param {DefaultApiPostApiCoreAccount1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiCoreAccount1(requestParameters: DefaultApiPostApiCoreAccount1Request = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiCoreAccount1(requestParameters.authorization, requestParameters.postApiCoreAccount1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Создание карты в аккаунте
     * @summary POST /api/core/card
     * @param {DefaultApiPostApiCoreCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiCoreCard(requestParameters: DefaultApiPostApiCoreCardRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiCoreCard(requestParameters.authorization, requestParameters.postApiCoreCardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Создание депозита
     * @summary POST /api/core/deposit
     * @param {DefaultApiPostApiCoreDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiCoreDeposit(requestParameters: DefaultApiPostApiCoreDepositRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiCoreDeposit(requestParameters.authorization, requestParameters.postApiCoreDepositRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DefaultApiPostApiCoreOtpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiCoreOtp(requestParameters: DefaultApiPostApiCoreOtpRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiCoreOtp(requestParameters.postApiCoreOtpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DefaultApiPostApiCoreOtpConfirmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiCoreOtpConfirm(requestParameters: DefaultApiPostApiCoreOtpConfirmRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiCoreOtpConfirm(requestParameters.postApiCoreOtpConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DefaultApiPostApiCoreOtpResendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiCoreOtpResend(requestParameters: DefaultApiPostApiCoreOtpResendRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiCoreOtpResend(requestParameters.postApiCoreOtpResendRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Редактирование карты
     * @summary PUT /api/core/card/{card_id}
     * @param {DefaultApiPutApiCoreCardCardIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putApiCoreCardCardId(requestParameters: DefaultApiPutApiCoreCardCardIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putApiCoreCardCardId(requestParameters.cardId, requestParameters.authorization, requestParameters.putApiCoreCardCardIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET api/core/payment/{service_id}
         * @param {string} serviceId 
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCorePaymentServiceId: async (serviceId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('getApiCorePaymentServiceId', 'serviceId', serviceId)
            const localVarPath = `/api/core/payment/{service_id}`
                .replace(`{${"service_id"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET api/core/payment/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentList: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/payment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST /api/core/history
         * @param {string} [authorization] Access token
         * @param {PostApiCoreHistoryRequest} [postApiCoreHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreHistory: async (authorization?: string, postApiCoreHistoryRequest?: PostApiCoreHistoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/core/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiCoreHistoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET api/core/payment/{service_id}
         * @param {string} serviceId 
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCorePaymentServiceId(serviceId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiCorePaymentServiceId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCorePaymentServiceId(serviceId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET api/core/payment/list
         * @param {string} [authorization] Access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentList(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentList(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST /api/core/history
         * @param {string} [authorization] Access token
         * @param {PostApiCoreHistoryRequest} [postApiCoreHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCoreHistory(authorization?: string, postApiCoreHistoryRequest?: PostApiCoreHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiCoreHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCoreHistory(authorization, postApiCoreHistoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary GET api/core/payment/{service_id}
         * @param {PaymentApiGetApiCorePaymentServiceIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCorePaymentServiceId(requestParameters: PaymentApiGetApiCorePaymentServiceIdRequest, options?: AxiosRequestConfig): AxiosPromise<GetApiCorePaymentServiceId200Response> {
            return localVarFp.getApiCorePaymentServiceId(requestParameters.serviceId, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET api/core/payment/list
         * @param {PaymentApiGetPaymentListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentList(requestParameters: PaymentApiGetPaymentListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPaymentList200Response> {
            return localVarFp.getPaymentList(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST /api/core/history
         * @param {PaymentApiPostApiCoreHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCoreHistory(requestParameters: PaymentApiPostApiCoreHistoryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostApiCoreHistory200Response> {
            return localVarFp.postApiCoreHistory(requestParameters.authorization, requestParameters.postApiCoreHistoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getApiCorePaymentServiceId operation in PaymentApi.
 * @export
 * @interface PaymentApiGetApiCorePaymentServiceIdRequest
 */
export interface PaymentApiGetApiCorePaymentServiceIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentApiGetApiCorePaymentServiceId
     */
    readonly serviceId: string

    /**
     * Access token
     * @type {string}
     * @memberof PaymentApiGetApiCorePaymentServiceId
     */
    readonly authorization?: string
}

/**
 * Request parameters for getPaymentList operation in PaymentApi.
 * @export
 * @interface PaymentApiGetPaymentListRequest
 */
export interface PaymentApiGetPaymentListRequest {
    /**
     * Access token
     * @type {string}
     * @memberof PaymentApiGetPaymentList
     */
    readonly authorization?: string
}

/**
 * Request parameters for postApiCoreHistory operation in PaymentApi.
 * @export
 * @interface PaymentApiPostApiCoreHistoryRequest
 */
export interface PaymentApiPostApiCoreHistoryRequest {
    /**
     * Access token
     * @type {string}
     * @memberof PaymentApiPostApiCoreHistory
     */
    readonly authorization?: string

    /**
     * 
     * @type {PostApiCoreHistoryRequest}
     * @memberof PaymentApiPostApiCoreHistory
     */
    readonly postApiCoreHistoryRequest?: PostApiCoreHistoryRequest
}

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary GET api/core/payment/{service_id}
     * @param {PaymentApiGetApiCorePaymentServiceIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getApiCorePaymentServiceId(requestParameters: PaymentApiGetApiCorePaymentServiceIdRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getApiCorePaymentServiceId(requestParameters.serviceId, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET api/core/payment/list
     * @param {PaymentApiGetPaymentListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getPaymentList(requestParameters: PaymentApiGetPaymentListRequest = {}, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).getPaymentList(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST /api/core/history
     * @param {PaymentApiPostApiCoreHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public postApiCoreHistory(requestParameters: PaymentApiPostApiCoreHistoryRequest = {}, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).postApiCoreHistory(requestParameters.authorization, requestParameters.postApiCoreHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


